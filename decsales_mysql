SELECT COUNT(*)
FROM decsales

SELECT *
FROM decsales

SELECT gender, SUM(unitprice)
FROM decsales
GROUP BY gender
ORDER BY SUM(unitprice) DESC

SELECT DISTINCT Gender
FROM decsales

select *
FROM test_table`christmas sales and trends - december 2023`ï»¿TransactionIDï»¿TransactionID

SELECT *
FROM decsales

ALTER TABLE decsales
RENAME COLUMN `ï»¿TransactionID` TO TransactionID

--1 how many women purchased electronics?
SELECT Gender, 
Category,
COUNT(*)
FROM decsales
WHERE Gender = 'Female' AND Category = 'Electronics'

--2 total sales from purcahses by men of age 20-30 buying toys
SELECT Gender, 
	ROUND(SUM(TotalPrice),2) AS MenBought
FROM decsales
WHERE gender = 'Male' 
	AND category = 'Toys' 
	AND (age BETWEEN 20 AND 30)
GROUP BY gender

--3 how many men of age 40-60 purchased toys
SELECT DISTINCT COUNT(CustomerID) AS MenCount
FROM decsales
WHERE gender = 'Male' 
	AND category = 'Toys' 
	AND (age BETWEEN 40 AND 60)
GROUP BY gender

--4 give the breakdown of age range of men and women who purchased toys in christmas market
--get maximum and minimum age, group into age range
SELECT MAX(Age), MIN(Age)
FROM decsales
--cannot use WITH using Mysql
WITH (SELECT Age,
	CASE
		WHEN Age < 18 THEN 'Under 18'
		WHEN Age BETWEEN 18 AND 24 THEN '18-24'
		WHEN Age BETWEEN 25 AND 34 THEN '25-34'
		WHEN Age BETWEEN 35 AND 44 THEN '35-44'
		WHEN Age BETWEEN 45 AND 54 THEN '45-54'
		WHEN Age BETWEEN 55 AND 64 THEN '55-64'
		WHEN Age >= 64 THEN '65 or over'
	END AS 'AgeGroup'
FROM decsales)
--age range and division by gender

SELECT DISTINCT AgeGroup, Gender, COUNT(Gender) AS BuyerCount
FROM (SELECT Age, Gender, Category, Event,
	CASE
		WHEN Age < 18 THEN 'Under 18'
		WHEN Age BETWEEN 18 AND 24 THEN '18-24'
		WHEN Age BETWEEN 25 AND 34 THEN '25-34'
		WHEN Age BETWEEN 35 AND 44 THEN '35-44'
		WHEN Age BETWEEN 45 AND 54 THEN '45-54'
		WHEN Age BETWEEN 55 AND 64 THEN '55-64'
		WHEN Age >= 64 THEN '65 or over'
	END AS AgeGroup
FROM decsales) AS AgeGroup
WHERE Category = 'Toys' AND Event = 'Christmas Market'
GROUP BY AgeGroup, Gender
ORDER BY AgeGroup ASC, BuyerCount DESC

--5 which gender bought the most per category, and how many? get only the top rank MAX()
SELECT 
	category,
    gender,
    total_quantity
FROM
(
SELECT
    category,
    gender,
    SUM(quantity) AS total_quantity,
    RANK() OVER (PARTITION BY category ORDER BY SUM(quantity) DESC) AS rnk
FROM decsales
GROUP BY category, gender
) ranked_sales
WHERE rnk = 1;


--6 what percentage of debit card users return the items they bought?
select 
	(sum(debitreturn)/count(*))*100
from
(select 
	paymenttype,
    returnflag,
    case when returnflag = 'TRUE' then 1
    else 0
    end as debitreturn
    from decsales
    where paymenttype = 'Debit Card'
) as totalreturn

--7 which month had the highest and lowest sales?
group by month
count total sales or highest product price total
rank

--8 rolling average? running total adding past one or two previous months and anohter column for present month sales
WITH 
	curr_month AS (SELECT DISTINCT DATE_FORMAT(date,'%Y-%M') as yrmo, date, transactionid FROM decsales ORDER BY date),
	total AS (SELECT * FROM decsales)
SELECT yrmo, ROUND(SUM(totalprice),2)
FROM curr_month a
JOIN total b ON a.transactionid = b.transactionid
GROUP BY yrmo

--9 per year cumulative total sales
SELECT YEAR(date), 
       ROUND((SUM(totalprice)),2),
       (SELECT ROUND(SUM(totalprice),2) 
        FROM decsales 
        WHERE date<=MAX(a.date)) cumulative_gross
FROM decsales a GROUP BY YEAR(date)
ORDER BY YEAR(date);

create new column
use date from old date column and then string 

UPDATE decsales
JOIN newdate ON decsales.TransactionID = newdate.TransactionID -- Replace 'id' with the column that relates the two tables
SET decsales.date = newdate.date;

--per age range, which gender bought the most and how many? get only the top row
--how many unique products are being bought (regardless of quantity)? which category has the higest and lowest unique
--what payment method is preferred by women that buy during snowy weather?
--second higest
--last 5 rows
--create pivot
--use lag, lead, max, min

